#!/usr/bin/env sh
#rpi_img - make arch arm disk image for raspberry pi
set -eu

exists() { command -v "$1" >/dev/null 2>&1; }
die() { printf '%s\n' "$*" >&2; exit 1; }

clean() {
    sudo umount boot root
    sudo rmdir boot root
    losetup --list | grep -q "$DEVICE" && sudo losetup -d "$DEVICE"
}

get_image() { #1: version
    set -- "$PWD" \
        "http://os.archlinuxarm.org/os/ArchLinuxARM-rpi-${1}-latest.tar.gz"
    cd "${XDG_CACHE_HOME:-$HOME/.cache}"
    if exists curl; then
        test -e "${2##*/}" && curl -Lo "${2##*/}" -z "${2##*/}" "$2" || true
        test ! -e "${2##*/}" && curl -Lo "${2##*/}" "$2" || true
    elif exists wget; then
        wget -N "$2"
    fi
    echo "$PWD/${2##*/}"
    cd "$1"
}

rpi_img() { #1: path, 2: version, 3: size
    trap clean EXIT
    exists mkfs.vfat || die "error: install mkfs.vfat"
    exists mkfs.ext4 || die "error: install mkfs.ext4"
    if [ ! -b "$1" ] && [ $# -eq 3 ]; then
        sudo modprobe loop
        truncate -s "$3" "$1"
        set -- "$(sudo losetup -fP --show "$1")" "$2" "$3"
        expr "$1" : /dev/ || die "error: loopback setup failed"
    elif [ $# -ne 2 ]; then
        die "usage: rpi_img DEVPATH VERSION [SIZE (only if loop device)]"
    fi
    DEVICE="$1"
    echo 'o; n;p;1;;+100M; t;c; n;p;2;;; w;q;' \
        | tr -d \  | tr ';' '\n' \
        | sudo fdisk "$1" || true #rereading partition table may have failed
    sudo blockdev --rereadpt -v "$1" || sudo partprobe "$1"
    (
        set -- $(lsblk -lnoNAME /dev/sdb | sort | sed '1d;s|^|/dev/|')
        yes | sudo mkfs.vfat $1 && mkdir -p boot && sudo mount $1 boot || true
        yes | sudo mkfs.ext4 $2 && mkdir -p root && sudo mount $2 root || true
    )
    [ -d boot ] && [ -d root ] || die "error: fs setup/mount failed"
    echo "Actually downloading/writing data. This may take a long time..." >&2
    sudo bsdtar -xpf "$(get_image "$2")" -C root && sync
    sudo mv root/boot/* boot && sync
}
rpi_img "$@"
