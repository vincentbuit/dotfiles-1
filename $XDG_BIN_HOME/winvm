#!/usr/bin/env sh
#winvm - manage windows vm
set -eu

exists() { command -v "$1" >/dev/null 2>&1; }
daemon() ( exec "$@" >/dev/null 2>&1 & )

get_unused_id() (
    cd "$XDG_DATA_HOME/winvm"
    set -- $(seq $(( $(cat */id | sort | tail -n1) + 1 )) )
    for i; do
        if ! cat */id | grep -q "^$i$"; then echo "$i"; return; fi
    done
)

get_vm_id() { #1:vm 2?:host
    if [ "$#" -eq 1 ] || [ -z "${2:-}" ]; then
        cat "$XDG_DATA_HOME/winvm/$1/id"
    else
        ssh "$2" cat '"${XDG_DATA_HOME:-$HOME/.local/share}/winvm/'"$1"'/id"'
    fi
}

get_port() { #1:id 2:port
    echo $(( 10000 + 1000 * $1 + $2 ))
}

ssh_judo() {
    OPTIND=1; unset script sshop envvar
    while getopts 's:o:e:' OPT "$@"; do
        case "$OPT" in
        s) script="$OPTARG" ;;
        o) sshop="${sshop+$sshop }'$(echo "-o$OPTARG"|sed s/\'/\'\\\'\'/g)'" ;;
        e) envvar="${envvar+$envvar }'$(echo "$OPTARG"|sed s/\'/\'\\\'\'/g)'";;
        esac
    done
    shift $(( $OPTIND - 1 ))
    eval "set -- ${sshop-} \"\$@\""
    tar -cf/dev/stdout "$script"/* \
        | ssh "$@" \
            "tar -xf/dev/stdin; \
                env ${envvar:-} sh \"$script/script\" </dev/null; \
                rm -r \"$script\""
}

install_deps() {
    sudo pacman -q --noconfirm -S --needed base-devel vagrant virtualbox \
        ebtables dnsmasq net-tools virtualbox-host-modules-arch linux-headers
    sudo modprobe vboxdrv
    mkdir -p "$XDG_DATA_HOME/vboxvms"
    vboxmanage setproperty machinefolder "$XDG_DATA_HOME/vboxvms/"
}

provision() { #1:name
    install_deps
    HOST_ID="$(get_unused_id)"
    HOST_HTTP_PORT="$(get_port "$HOST_ID" 80)"
    HOST_RDP_PORT="$(get_port "$HOST_ID" 389)"
    HOST_SSH_PORT="$(get_port "$HOST_ID" 22)"
    HOST_WSSH_PORT="$(get_port "$HOST_ID" 23)"

    mkdir -p "$XDG_DATA_HOME/winvm/$1"
    cd "$XDG_DATA_HOME/winvm/$1"
    echo "$HOST_ID" >id
    <"$XDG_CONFIG_HOME/winvm/Vagrantfile" \
        sed \
            -e "s|\\\$HOSTNAME|$1|" \
            -e "s|\\\$HOST_WSSH_PORT|$HOST_WSSH_PORT|" \
            -e "s|\\\$HOST_SSH_PORT|$HOST_SSH_PORT|" \
            -e "s|\\\$HOST_RDP_PORT|$HOST_RDP_PORT|" \
            -e "s|\\\$HOST_HTTP_PORT|$HOST_HTTP_PORT|" \
        >"Vagrantfile"

    yes | ssh-keygen -N '' -f root
    <"$XDG_CONFIG_HOME/winvm/provision.ps1" \
        sed \
            -e "s|\\\$HOSTNAME|$1|" \
            -e "s|\\\$ROOTPUBKEY|$(cat root.pub)|" \
        >"provision.ps1"

    vagrant up --provider=virtualbox --provision
    vagrant halt
    vagrant up --provider=virtualbox --provision

    ssh-keygen -R "[localhost]:$HOST_SSH_PORT" || true
    ssh-keygen -R "[localhost]:$HOST_WSSH_PORT" || true
    ssh-keyscan -H4p "$HOST_SSH_PORT" localhost >>"$HOME/.ssh/known_hosts" \
        || true
    ssh-keyscan -H4p "$HOST_WSSH_PORT" localhost >>"$HOME/.ssh/known_hosts" \
        || true

    (cd "$PREFIX/dot/orchestration"
        ssh_judo \
            -oIdentityFile="$XDG_DATA_HOME/winvm/$1/root" \
            -oPasswordAuthentication=no \
            -s init root@localhost -p "$HOST_WSSH_PORT" || true
        ssh_judo -oPasswordAuthentication=no -oPort="$HOST_WSSH_PORT" \
            -s update localhost
        ssh_judo -oPasswordAuthentication=no -oPort="$HOST_WSSH_PORT" \
            -s home localhost
    )
}

cd_vagrant() {
    cd "$XDG_DATA_HOME/winvm/$1"
    shift; env vagrant "$@"
}

if [ "$1" = global-status ]; then
    vagrant global-status \
        | sed '1d;/^--*$/d;/^ $/,$d;s/  */\t/g' \
        | while read -r LINE; do
            printf '%s\t%s\n' "$(cat "$(echo "$LINE" | cut -f5)/id")" "$LINE"
        done \
        | sed "s|$XDG_DATA_HOME|\\\$XDG_DATA_HOME|" \
        | cut -f1,2,3,5,6 \
        | sort
elif [ "$2" = forward ]; then
    VM_ID="$(get_vm_id "$1" "$3")"
    ssh "$3" -fNT \
        -L "$(get_port "$VM_ID" 389):localhost:$(get_port "$VM_ID" 389)" \
        -L "$(get_port "$VM_ID" 80):localhost:$(get_port "$VM_ID" 80)" \
        -L "$(get_port "$VM_ID" 22):localhost:$(get_port "$VM_ID" 22)" \
        -L "$(get_port "$VM_ID" 23):localhost:$(get_port "$VM_ID" 23):"
elif [ "$2" = wssh ]; then
    VM_ID="$(get_vm_id "$1" "$3")"
    shift 3
    ssh localhost -p "$(get_port "$VM_ID" 23)" "$@"
elif [ "$2" = rdp ]; then
    HOST_RDP_PORT="$(get_port "$(get_vm_id "$1" "${3:-}")" 389)"
    case "$(uname -s)" in
    Darwin)
        set -- "$1" "$2" "${3:-}" "$XDG_CACHE_HOME/$1.rdp"
        printf "username:s:%s\r\nfull address:s:localhost:%s\r\n" \
            "WINVM\\vagrant" "$HOST_RDP_PORT" >"$4"
        open -a "Microsoft Remote Desktop" "$4"
    ;;
    Linux)
        if exists rdesktop; then
            echo yes | daemon rdesktop localhost -u vagrant -p vagrant -K \
            -T winvm  -g 1920x1102 -r clipboard:PRIMARYCLIPBOARD
        elif exists xfreerdp; then
            daemon xfreerdp +sec-tls /cert-ignore /v:localhost /p:3389
                /u:vagrant /p:vagrant /kbd:0x00010409 /dynamic-resolution
        else
            printf "error: no RDP app found. Install rdesktop or xfreerdp" >&2
            exit 1
        fi
    ;;
    esac
elif [ "$2" = provision ]; then
    provision "$1"
elif vagrant list-commands | cut -d\  -f1 | sed '1,3d' | grep -q "^$2\$"; then
    cd_vagrant "$@"
else
    cd "$XDG_DATA_HOME/winvm/$1"
    shift; "$@"
fi
